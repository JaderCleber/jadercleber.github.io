{"version":3,"sources":["components/CardResult/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardResult","location","this","props","map","google","maps","Map","document","getElementById","zoom","center","Marker","position","_this$props","classes","onClose","street","neighborhood","city","cep","react_default","a","createElement","Paper","className","paper","Grid","container","spacing","justify","item","Button","id","onClick","Typography","gutterBottom","variant","xs","React","PureComponent","KEY","Geocode","setApiKey","App","state","found","mapReady","notFound","script","handleChange","e","_this","setState","target","value","replace","handleClick","Object","asyncToGenerator","regenerator_default","mark","_callee","response","data","geolocation","wrap","_context","prev","next","fetch","concat","sent","status","json","fromAddress","logradouro","bairro","localidade","uf","results","geometry","t0","console","log","startNumber","complemento","substr","indexOf","t1","stop","handleClose","_this2","type","src","scriptInDOM","getElementsByTagName","parentNode","insertBefore","addEventListener","_this$state","root","classnames","gray","FormControl","margin","Input","onChange","disabled","length","color","button","components_CardResult","withStyles","theme","flexGrow","overflow","padding","background","height","window","innerHeight","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d47b6006.chunk.js","sourcesContent":["/*global google*/\nimport React from 'react';\nimport { Grid, Paper, Button, Typography } from '@material-ui/core';\n\ninterface PropTypes {\n\tstreet: string | undefined;\n\tneighborhood: string | undefined;\n\tcity: string | undefined;\n\tcep: string | undefined;\n\tonClose(): void | undefined;\n\tclasses: any;\n\tlocation: any;\n}\n\nclass CardResult extends React.PureComponent<PropTypes, {}> {\n\tcomponentDidMount() {\n\t\tconst { location } = this.props;\n\t\tif (location) {\n\t\t\tconst map = new google.maps.Map(document.getElementById('map'), {\n\t\t\t\tzoom: 14,\n\t\t\t\tcenter: location\n\t\t\t});\n\t\t\tnew google.maps.Marker({\n\t\t\t\tposition: location,\n\t\t\t\tmap: map\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { classes, onClose, street, neighborhood, city, cep, location } = this.props;\n\t\treturn (\n\t\t\t<Paper className={classes.paper} >\n\t\t\t\t<Grid container spacing={2} justify='flex-end'>\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button id='btn-close' onClick={onClose}>X</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Typography gutterBottom variant='h5' id='street'>\n\t\t\t\t\t{street}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography gutterBottom variant='body1' id='neighborhood'>\n\t\t\t\t\t{neighborhood}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography gutterBottom variant='body1' id='city'>\n\t\t\t\t\t{city}\n\t\t\t\t</Typography>\n\t\t\t\t<Typography gutterBottom variant='body1' id='cep'>\n\t\t\t\t\t{cep}\n\t\t\t\t</Typography>\n\n\t\t\t\t<Grid container spacing={2} justify='center'>\n\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t{location ? (\n\t\t\t\t\t\t\t<div id='map' className={classes.map}></div>) :\n\t\t\t\t\t\t\t(<Typography gutterBottom variant='body1' id='cep'>\n\t\t\t\t\t\t\t\tCoordenadas n√£o encontradas\n\t\t\t\t\t\t\t</Typography>)\n\t\t\t\t\t\t}\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</Paper>\n\t\t);\n\t};\n}\n\nexport default CardResult;\n","import React from 'react';\nimport CardResult from './components/CardResult';\nimport { Grid, Paper, FormControl, Input, Typography, Button } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Geocode from 'react-geocode';\nimport classnames from 'classnames';\n\nconst KEY = 'AIzaSyCUv7kIrrpLwXW4xz0RrPFEbZZNWROKDwQ';\nGeocode.setApiKey(KEY);\n\nconst styles = (theme: any) => ({\n  root: {\n    flexGrow: 1,\n    overflow: 'hidden',\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  gray: {\n    background: '#efefef'\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  map: {\n    height: `${window.innerHeight * 0.40}px`\n  }\n});\n\ninterface IState {\n  cep: string;\n  found: {\n    cep?: string;\n    street?: string;\n    neighborhood?: string;\n    city?: string;\n    startNumber?: string;\n  };\n  location: any;\n  mapReady: boolean;\n  notFound: string;\n}\n\ninterface PropTypes {\n  classes: any;\n}\n\nclass App extends React.PureComponent<PropTypes, IState> {\n  state = {\n    cep: '',\n    found: {},\n    location: null,\n    mapReady: false,\n    notFound: '',\n  };\n\n  script: HTMLScriptElement | undefined;\n\n  componentDidMount() {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = `https://maps.google.com/maps/api/js?key=${KEY}`;\n    const scriptInDOM = document.getElementsByTagName('script')[0];\n    if (scriptInDOM.parentNode) {\n      scriptInDOM.parentNode.insertBefore(script, scriptInDOM);\n      script.addEventListener('load', e => {\n        this.setState({ mapReady: true });\n      })\n    }\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    this.setState({ cep: e.target.value.replace(/\\D/g, ''), notFound: '' });\n\n  handleClick = (cep: string) => () => {\n    this.setState({ found: {}, location: null, notFound: '' }, async () => {\n      try {\n        const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);\n        if (response.status === 200) {\n          const data = await response.json();\n          let location;\n          try {\n            const geolocation = await Geocode.fromAddress(`${data.logradouro}+${data.bairro}+${data.localidade}+${data.uf}`);\n            location = geolocation.results[0].geometry.location;\n          } catch (err) {\n            console.log(err);\n          }\n          this.setState({\n            found: {\n              cep: data.cep,\n              street: data.logradouro,\n              neighborhood: data.bairro,\n              city: `${data.localidade} - ${data.uf}`,\n              startNumber: data.complemento.substr(3, data.complemento.indexOf('/'))\n            },\n            location\n          });\n        }\n      } catch (err) {\n        this.setState({ notFound: 'Nenhum Resultado' });\n      }\n\n    });\n  };\n\n  handleClose = () => this.setState({ found: {}, cep: '' });\n\n  render() {\n    const { cep, found, location, mapReady, notFound }: IState = this.state;\n    const { classes } = this.props;\n    return (\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Paper className={classnames(classes.paper, classes.gray)}>\n            <Typography gutterBottom variant='h6'>\n              Consultar\n\t\t\t\t\t\t</Typography>\n            <Grid container spacing={2}>\n              <Grid item>\n                <Typography gutterBottom variant='overline'>\n                  CEP\n\t\t\t\t\t\t</Typography>\n              </Grid>\n              <Grid item xs={2}>\n                <FormControl className={classes.margin}>\n                  <Input id='cep-search' value={cep} onChange={this.handleChange} />\n                </FormControl>\n              </Grid>\n              <Grid item xs={2}>\n                <Button\n                  id='btn-search'\n                  disabled={cep.length !== 8}\n                  onClick={this.handleClick(cep)}\n                  variant='contained'\n                  color='primary'\n                  className={classes.button}>\n                  Buscar\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item xs={12}>\n          {found.cep && mapReady ? (\n            <CardResult\n              cep={found.cep}\n              street={found.street}\n              neighborhood={found.neighborhood}\n              city={found.city}\n              onClose={this.handleClose}\n              classes={classes}\n              location={location}\n            />\n          ) : (\n              <Typography gutterBottom variant='h6'>\n                {notFound}\n              </Typography>\n            )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}